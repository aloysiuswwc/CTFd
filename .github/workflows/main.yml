name: CI

on:
  push:
    branches: [main]

jobs:

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ctfd/ctfd:latest
            ghcr.io/ctfd/ctfd:latest
            ctfd/ctfd:${{ github.event.release.tag_name }}
            ghcr.io/ctfd/ctfd:${{ github.event.release.tag_name }}

  lint: 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.7']
    
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r development.txt
            sudo yarn install --non-interactive
            sudo yarn global add prettier@1.17.0

      - name: Lint
        run: make lint
        env:
            TESTING_DATABASE_URL: 'sqlite://'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

      - name: Lint docker-compose
        run: |
            python -m pip install docker-compose==1.26.0
            docker-compose -f docker-compose.yml config

  mysql:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.7']

    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r development.txt
            sudo yarn install --non-interactive

      - name: Test
        run: |
            sudo rm -f /etc/boto.cfg
            make test
        env:
            AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
            AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            TESTING_DATABASE_URL: mysql+pymysql://root:password@localhost:${{ job.services.mysql.ports[3306] }}/ctfd

      - name: Codecov
        uses: codecov/codecov-action@v1.0.11
        with:
          file: ./coverage.xml

  postgres:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: ctfd
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ['3.7']

    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r development.txt
            sudo yarn install --non-interactive

      - name: Test
        run: |
            sudo rm -f /etc/boto.cfg
            make test
        env:
            AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
            AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            TESTING_DATABASE_URL: postgres://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/ctfd

      - name: Codecov
        uses: codecov/codecov-action@v1.0.11
        with:
          file: ./coverage.xml

  sqlite:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.7']

    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r development.txt
            sudo yarn install --non-interactive
            sudo yarn global add prettier@1.17.0

      - name: Test
        run: |
            sudo rm -f /etc/boto.cfg
            make test
        env:
            AWS_ACCESS_KEY_ID: AKIAIOSFODNN7EXAMPLE
            AWS_SECRET_ACCESS_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            TESTING_DATABASE_URL: 'sqlite://'

      - name: Codecov
        uses: codecov/codecov-action@v1.0.11
        with:
          file: ./coverage.xml

  